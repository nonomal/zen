version: '3'

vars:
  ARCH64: '{{if eq ARCH "arm"}}arm64{{else}}{{ARCH}}{{end}}'
  GIT_TAG:
    sh: git describe --tags --always --abbrev=0

tasks:
  prod:
    desc: Create a production build of the application. Only recommended for use in CI/CD pipelines.
    cmds:
      - task: app
      - task: codesign
        vars:
          FILENAME: build/bin/Zen.app
      - task: notarize
        vars:
          FILENAME: build/bin/Zen.app
      - task: dmg
        vars:
          APP_FILENAME: build/bin/Zen.app
      - task: codesign
        vars:
          FILENAME: build/bin/Zen.dmg
      - task: notarize
        vars:
          FILENAME: build/bin/Zen.dmg

  deps:
    desc: Install the dependencies required to create a production build.
    cmds:
      - npm i -g create-dmg@^7.0.0

  app:
    desc: Build the .app application bundle. The .app file will be placed in the build/bin directory.
    cmds:
      - wails build -platform "darwin/{{default .ARCH64 .ARCH}}" -m -skipbindings -ldflags "-X 'github.com/anfragment/zen/internal/cfg.Version={{.GIT_TAG}}'"

  dmg:
    desc: Create a DMG installer for the application. The DMG file will be placed in the build/bin directory.
    cmds:
      - create-dmg "{{default .DEFAULT_APP_FILENAME .APP_FILENAME}}" --overwrite
      - mv Zen*.dmg build/bin/Zen.dmg # create-dmg creates the disk image in the current directory
      - echo "Built Zen.dmg"
    vars:
      DEFAULT_APP_FILENAME: build/bin/Zen.app

  setup-keychain:
    desc: Set up the keychain profile for signing the application.
    cmds:
      - security create-keychain -p "$CI_KEYCHAIN_PWD" zen.keychain
      - security default-keychain -s zen.keychain
      - security unlock-keychain -p "$CI_KEYCHAIN_PWD" zen.keychain
      - echo "$CERTIFICATE" | base64 --decode > certificate.p12
      - security import certificate.p12 -k zen.keychain -P "$CERTIFICATE_PWD" -T /usr/bin/codesign
      - rm certificate.p12
      - security set-key-partition-list -S "apple-tool:,apple:,codesign:" -s -k "$CI_KEYCHAIN_PWD" zen.keychain
    requires:
      vars: [CI_KEYCHAIN_PWD, CERTIFICATE, CERTIFICATE_PWD]

  codesign:
    desc: Codesign the specified file.
    internal: true
    cmds:
      - /usr/bin/codesign --force -s "$CERTIFICATE_NAME" --options runtime "{{.FILENAME}}" -v
    requires:
      vars: [FILENAME, CERTIFICATE_NAME]

  notarize:
    desc: Notarize the specified file.
    internal: true
    cmds:
      - xcrun notarytool store-credentials "notarytool-profile" --apple-id "$NOTARIZATION_APPLE_ID" --team-id "$NOTARIZATION_TEAM_ID" --password "$NOTARIZATION_PWD"
      - ditto -c -k --keepParent "{{.FILENAME}}" notarization.zip
      - xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait
      - xcrun stapler staple "{{.FILENAME}}"
      - rm notarization.zip
    requires:
      vars: [FILENAME, NOTARIZATION_APPLE_ID, NOTARIZATION_TEAM_ID, NOTARIZATION_PWD]
